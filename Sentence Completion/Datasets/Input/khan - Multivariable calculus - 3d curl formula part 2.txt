- [Voiceover] So I'm
explaining the formula for three-dimensional curl
and where we left off, we have this determinant
of a three-by-three matrix, which looks absurd because none of the individual components are actual numbers, but nevertheless, I'm about show how when you kind of go through the motions
of taking a determinant, you get a vector-valued function that corresponds to the curl. So let me show you what I mean by that. If you're computing the determinant, of the guy that we have pictured there in the upper-right, you start by taking this
upper-left component, and then multiplying it by the determinant of the sub-matrix, the sub-matrix whose rows are not the row of I and whose columns are not the row of I. So what that looks like over here, is we're gonna take that unit vector I, and then multiple it by a
certain little determinant, and what this sub-determinant involves is multiplying this
partial-partial Y by R, which means taking the partial derivative with respect to Y of the
multi-variable function R and then subtracting off
the partial derivative with respect to Z of Q. So we're subtracting
off partial derivative with respect to Z of the
multi-variable function Q, and then that, so that's the first thing that we do, and then as a second part, we take this J and we're
gonna subtract off, so you're kind of thinking
plus, minus, plus, for the elements in this top row, so we're gonna subtract off J, multiplied by another sub-determinant, and then this one is gonna involve, you know, this column
that it's not part of and this column that it's not part of, and you imagine those guys
as a two-by-two matrix, and its determinant involves taking the partial derivative with respect to X of R, so that's kind of the diagonal, partial-partial X of R, and then subtracting off
the partial derivative with respect to Z of P, so partial-partial Z of P, and then that's just two out of three of the things we need to do
for our overall determinant, because the last part we're gonna add, we're gonna add that
top-right component, K, multiplied by the sub-matrix whose columns involve the
column it's not part of and whose rows involve the
rows that it's not part of, so K multiplied by the
determinant of this guy is going to be, let's see, partial-partial X of Q, so that's partial-partial X of Q minus partial-partial Y of P, so partial derivative with respect to Y of the multi-variable function P, and that entire expression is the three-dimensional curl of the function whose components are P, Q, and R. So here we have our vector function, vector-valued function V whose components are P, Q, and R, and when you go through this whole process of imagining the cross-product between the Del operator, this Nabla symbol, and the vector output P, Q, and R, what you get is this whole expression, and, you know, here we're
writing with I, J, K notation, if you're writing it as a column vector, I guess I didn't erase some of these guys, but if you're writing
this as a column vector, it would look like saying the curl of your vector valued function V as a function of X, Y, and Z is equal to, and then what I'd put in
for this first component would be what's up there, so that would be your partial
with respect to Y of R minus partial of Q with respect to Z, so partial of Q with respect to Z, and I won't copy it down
for all of the other ones but in principle, you know, you'd kind of, whatever
this J component is, and I guess we're subtracting it so you'd subtract there, you'd copy that as the next
component and then over here. But often times when
you're computing curl, you kinda switch to
using this IJK notation. My personal preference,
I typically default to column vectors and other people will write in terms of I, J, and K, it doesn't really matter as long as you know how to go back
and forth between the two. One really quick thing
that I wanna highlight before doing an example of this is that the K-component here, the Z-component of the output, is exactly the
two-dimensional curl formula. If you kind of look back
to the videos on 2-D curl and what its formula is, that is what we have here. And in fact all the other components kind of look like mirrors of that but you're using slightly
different operators and slightly different functions but if you think about rotation that happens purely in the XY plane, just two-dimensional rotation, and how in three dimensions that's described with a vector in the K direction and again, if that
doesn't quite seem clear, maybe look back at the video on describing rotation with
a three-dimensional vector and the right-hand rule, but vector is pointing
in the pure Z direction, describe rotation in the XY plane, and what's happening with these other guys is kind of similar, right? Rotation that happens
purely in the XZ plane is gonna correspond with a rotation vector in the Y direction, the direction perpendicular to the X, let's see, so the XZ plane over here. And then similarly this first component kind of tells you all
the rotation happening in the YZ plane and the vectors in the I direction, the X
direction of the output, kind of corresponds to
rotation in that plane. Now when you compute it, you're not always thinking about oh, you know, this corresponds to rotation in that plane and this corresponds to rotation in that plane, you're just kind of computing it to get a formula out, but I think it's kind of nice to recognize that all the intuition that we put into the two-dimensional curl does show up here and another thing I wanna emphasize is this is not a formula to be memorized. I would not, if I were you, try to sit down and memorize
this long expression. The only thing that you need to remember, the only thing, is that curl is represented as this Del cross V, this Nabla symbol cross product with a vector-valued function V, because from there, whatever
your components are, you can kind of go through the process that I just did and the more you do it, the quicker it becomes, it's kind of long but it
doesn't take that long, and it's certainly much
more fault-tolerant than trying to remember something that has as many moving parts as the formula that you see here, and in the next video I'll go through an actual example of that. I'll have functions for P, Q, and R and walk through that process in a more concrete context. I'll see you then!