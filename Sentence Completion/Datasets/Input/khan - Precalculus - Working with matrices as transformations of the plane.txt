- [Instructor] In a previous video, I talked about how a
two-by-two matrix can be used to define a transformation for
the entire coordinate plane. What we're going to do in this video, is experiment with that little bit and see if we can think
about how to engineer two-by-two matrices to do
some of the transformations that you might be familiar with, like rotations, or
dilations, or reflections. So this is a website run
by the University of Texas, web.ma.utexas.edu. And you have the URL here,
I encourage you to go there and play around with it yourself. And what I have here is,
I have our two vectors, which any point on our
coordinate access can be defined by some combination of these two vectors. This in red here is the vector one, zero. It goes one in the x-direction,
zero in the y-direction, and you can see that is this
first column right over here in this identity matrix. And this blue vector right over here, this is the vector zero, one, which is the second column
in this identity matrix. It goes zero in the x-direction, and then one in the y-direction. Now, the way to engineer a
transformation is to say, well, what would that transformation
do to these two vectors, and then change the numbers accordingly. So, for example, let's say that we wanted to have a reflection about the x-axis. So if you did a reflection
about the x-axis, this red vector would not change. It would stay one, zero. But what would happen to this blue vector? Instead of being zero, one, it would be zero, negative one. So in the transformation matrix, if I go from the identity matrix here, but instead of zero, one, I now, it will no longer be the identity matrix if I put a negative one here. And when I press Enter, this should flip this blue
vector over the x-axis and essentially flip
everything else with it. So let's try that out. I'm gonna press Enter,
and there you have it. That cute little golden
retriever is now flipped over. So that met our intuition. So let's go back back to
what we were doing before. So that's a reflection, and you could think
about what would you do if you wanted to flip the
other way across the y-axis. Now, what about a dilation? What if we wanted to shrink
everything by a factor of two? How do you think we would
modify this matrix to do that? Pause this video and think about that? Well, if we want to scale everything down, what we would want is,
each of these vectors, and especially if it's by a factor of two, we'd want each of these
vectors to be half as long. So instead of one, zero and zero, one, we would do 0.5, zero and 0.5. Let me press Enter and see what happens. There you go. It indeed worked. And really this should
have showed this red vector gets smaller and this
blue vector gets smaller. But hopefully you get the idea. And so let me go. Or maybe this one that always show what we could kind of
call it, unit vectors. But let's go back to the original. And now let's think about our rotation. This is an interesting one. Pause this video and think
about how you would rotate it if you wanted to rotate this
clockwise by 90 degrees. All right. If you rotate clockwise by 90 degrees this red vector is no longer one, zero. It would become zero, negative one. So let me write that down. Zero, negative one. And the blue vector would then go to where this red vector is
and it would become one, zero. So let's see if we did it the right way. I'm gonna click Enter. And there you go. We got our 90 degree rotation. And so I just gave you some examples of how you can do a pure rotation, a pure dilation, or a pure reflection. But you can imagine you can
also do combinations of them, by manipulating this matrix accordingly. And I encourage you to play around. You can do some exotic
transformations if you want. Let's see what happens
if I make this a one. Press Enter. Oh, that's interesting. What happens if I then make this a two? Oh, that's interesting. So notice, you can do all sorts of really interesting
linear transformation. And just as a reminder,
linear transformation is one where the origin
always maps to itself, and any lines are mapped to other lines. Not necessarily the same line, but whatever it gets mapped
to will still be aligned.